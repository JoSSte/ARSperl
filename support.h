/* THIS FILE WAS AUTOMATICALLY GENERATED BY Makefile.PL */
/*                  DO NOT EDIT                         */


/*
$Header: /cvsroot/arsperl/ARSperl/Attic/support.h,v 1.14 2000/06/01 16:54:03 jcmurphy Exp $

    ARSperl - An ARS v2 - v4 / Perl5 Integration Kit

    Copyright (C) 1995,1996,1997,1998,1999
	Joel Murphy, jmurphy@acsu.buffalo.edu
        Jeff Murphy, jcmurphy@acsu.buffalo.edu

    This program is free software; you can redistribute it and/or modify
    it under the terms as Perl itself. 
    
    Refer to the file called "Artistic" that accompanies the source distribution 
    of ARSperl (or the one that accompanies the source distribution of Perl
    itself) for a full description.
 
    Comments to:  arsperl@smurfland.cit.buffalo.edu
                  (this is a *mailing list* and you must be
                   a subscriber before posting)

    Comments to: arsperl@lurch.cit.buffalo.edu
    Home Page: http://arsinfo.cit.buffalo.edu
 
    LOG:

$Log: support.h,v $
Revision 1.14  2000/06/01 16:54:03  jcmurphy
*** empty log message ***

Revision 1.7  2000/05/24 18:05:25  jcmurphy
primary ars4.5 integration in this checkpoint.

Revision 1.6  1999/10/03 04:00:27  jcmurphy
various

Revision 1.5  1999/03/12 07:27:16  jcmurphy
1.6400 BETA - OO layer and attachments

Revision 1.4  1999/01/04 21:05:14  jcmurphy
fixed some conditional compilation typos/omissions

Revision 1.3  1998/12/28 15:46:10  jcmurphy
v1.62

Revision 1.2  1998/09/11 19:36:44  jcmurphy
added perl_diary prototype

Revision 1.1  1998/08/07 18:38:23  jcmurphy
Initial revision

Revision 1.13  1998/08/07 16:21:27  jcmurphy
added ars3.2 def's to ServerInfoMap list

Revision 1.12  1998/05/19 13:10:26  jcmurphy
fixed strstr/substr typo

Revision 1.11  1998/03/31 23:32:06  jcmurphy
NT patch by  Bill Middleton <wjm@metronet.com>

Revision 1.1  1998/03/17 15:19:02  aawimi
Initial revision

Revision 1.9  1997/11/10 23:50:36  jcmurphy
1.5206: added refreshCode to GetCharMenu().
added ars_GetVUI to EXPORTS in .pm file
fixed bug in 1.5205's groupList alteration

Revision 1.8  1997/11/04 18:16:04  jcmurphy
1.5205: permissions list map

Revision 1.7  1997/10/20 21:00:41  jcmurphy
5203 beta. code cleanup. winnt additions. malloc/free
debugging code.

Revision 1.6  1997/10/09 15:21:33  jcmurphy
1.5201: code cleaning

Revision 1.5  1997/10/09 00:49:28  jcmurphy
1.52: uninit'd var bug fix

Revision 1.4  1997/10/07 14:29:38  jcmurphy
1.51

Revision 1.3  1997/10/02 15:39:53  jcmurphy
1.50beta

Revision 1.2  1997/09/04 00:20:47  jcmurphy
*** empty log message ***

Revision 1.1  1997/08/05 21:21:11  jcmurphy
Initial revision


*/

#ifndef __support_h_
#define __support_h_

#if (PERL_BASEREV_IS == 50) && (PERL_PATCHLEVEL_IS < 5)
 #define PL_na na
 #define PL_sv_undef sv_undef
#endif

#undef EXTERN
#ifndef __support_c_
# define EXTERN extern
#else
# define EXTERN 
#endif

#include "ar.h"
#include "arerrno.h"
#include "arextern.h"
#include "arstruct.h"
#include "arfree.h"

#include "nt.h"
#include "nterrno.h"
#include "ntfree.h"
#include "ntsextrn.h"

/* the following are defined because we use them as default values in ARS.xs */

#if AR_EXPORT_VERSION < 3
# define AR_FIELD_TYPE_ALL 0
# include "ntcextrn.h"
#endif
#if AR_EXPORT_VERSION < 5
# define AR_IMPORT_OPT_CREATE 0
# define AR_IMPORT_OPT_OVERWRITE 1
#endif

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include <stdio.h>
#include <string.h>
#include <limits.h>

#ifdef PROFILE
# include <sys/time.h>
#endif

typedef struct {
  unsigned int numItems;
  void *array;
} ARList;

typedef struct {
  ARControlStruct ctrl;
  int queries;
  long startTime;
  long endTime;
} ars_ctrl;

#define TYPEMAP_LAST 0xFFFFFFFFL

typedef struct {
  unsigned int  number;
  char         *name;
} TypeMapStruct;

static struct {
	unsigned int  number;
	char         *name;
} ComParmTypeMap[] = {
  { AR_COM_PARM_NULL, 	"null" },
  { AR_COM_PARM_FIELDID, 	"fieldid" },
  { AR_COM_PARM_VALUE, 	"value" },
	{ TYPEMAP_LAST, "" }
};

static struct {
	unsigned int  number;
	char         *name;
} ComMethodTypeMap[] = {
  { AR_COM_METHOD_NULL, 	"null" },
  { AR_COM_METHOD_FIELDID, 	"fieldid" },
	{ TYPEMAP_LAST, "" }
};

static struct {
	unsigned int  number;
	char         *name;
} ActiveLinkActionTypeMap[] = {
  { AR_ACTIVE_LINK_ACTION_NONE, 	"none" },
  { AR_ACTIVE_LINK_ACTION_MACRO, 	"macro" },
  { AR_ACTIVE_LINK_ACTION_FIELDS, 	"fields" },
  { AR_ACTIVE_LINK_ACTION_PROCESS, 	"process" },
  { AR_ACTIVE_LINK_ACTION_MESSAGE, 	"message" },
  { AR_ACTIVE_LINK_ACTION_SET_CHAR, 	"set_char" },
  { AR_ACTIVE_LINK_ACTION_DDE, 	"dde" },
  { AR_ACTIVE_LINK_ACTION_FIELDP, 	"fieldp" },
  { AR_ACTIVE_LINK_ACTION_SQL, 	"sql" },
  { AR_ACTIVE_LINK_ACTION_AUTO, 	"auto" },
  { AR_ACTIVE_LINK_ACTION_OPENDLG, 	"opendlg" },
  { AR_ACTIVE_LINK_ACTION_COMMITC, 	"commitc" },
  { AR_ACTIVE_LINK_ACTION_CLOSEWND, 	"closewnd" },
  { AR_ACTIVE_LINK_ACTION_CALLGUIDE, 	"callguide" },
  { AR_ACTIVE_LINK_ACTION_EXITGUIDE, 	"exitguide" },
  { AR_ACTIVE_LINK_ACTION_GOTOGUIDELABEL, 	"gotoguidelabel" },
  { AR_ACTIVE_LINK_ACTION_WAIT, 	"wait" },
  { AR_ACTIVE_LINK_ACTION_GOTOACTION, 	"gotoaction" },
	{ TYPEMAP_LAST, "" }
};

static struct {
	unsigned int  number;
	char         *name;
} CharMenuTypeMap[] = {
  { AR_CHAR_MENU_NONE, 		"none" },
  { AR_CHAR_MENU_LIST, 		"list" },
  { AR_CHAR_MENU_QUERY, 		"query" },
  { AR_CHAR_MENU_FILE, 		"file" },
  { AR_CHAR_MENU_SQL, 		"sql" },
	{ TYPEMAP_LAST, "" }
};

static struct {
	unsigned int  number;
	char         *name;
} FilterActionTypeMap[] = {
  { AR_FILTER_ACTION_NONE, 	"none" },
  { AR_FILTER_ACTION_NOTIFY, 	"notify" },
  { AR_FILTER_ACTION_MESSAGE, 	"message" },
  { AR_FILTER_ACTION_LOG, 	"log" },
  { AR_FILTER_ACTION_FIELDS, 	"fields" },
  { AR_FILTER_ACTION_PROCESS, 	"process" },
  { AR_FILTER_ACTION_FIELDP, 	"fieldp" },
  { AR_FILTER_ACTION_SQL, 	"sql" },
  { AR_FILTER_ACTION_GOTOACTION, 	"gotoaction" },
	{ TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} CharMenuRefreshCodeTypeMap[] = {
  { AR_MENU_REFRESH_CONNECT, 		"connect" },
  { AR_MENU_REFRESH_OPEN, 		"open" },
  { AR_MENU_REFRESH_INTERVAL, 		"interval" },
  { TYPEMAP_LAST, "" }
};

#define PERMTYPE_SCHEMA 0
#define PERMTYPE_FIELD  1

static struct {
  unsigned int  number;
  char         *name;
} SchemaPermissionTypeMap[] = {
  { AR_PERMISSIONS_NONE, 		"none" },
  { AR_PERMISSIONS_VISIBLE, 		"visible" },
  { AR_PERMISSIONS_HIDDEN, 		"hidden" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} FieldPermissionTypeMap[] = {
  { AR_PERMISSIONS_NONE, 		"none" },
  { AR_PERMISSIONS_VIEW, 		"view" },
  { AR_PERMISSIONS_CHANGE, 		"change" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} DataTypeMap[] = {
  { AR_DATA_TYPE_NULL, 		"null" },
  { AR_DATA_TYPE_KEYWORD, 		"keyword" },
  { AR_DATA_TYPE_INTEGER, 		"integer" },
  { AR_DATA_TYPE_REAL, 		"real" },
  { AR_DATA_TYPE_CHAR, 		"char" },
  { AR_DATA_TYPE_DIARY, 		"diary" },
  { AR_DATA_TYPE_ENUM, 		"enum" },
  { AR_DATA_TYPE_TIME, 		"time" },
  { AR_DATA_TYPE_BITMASK, 		"bitmask" },
  { AR_DATA_TYPE_BYTES, 		"bytes" },
  { AR_DATA_TYPE_DECIMAL, 		"decimal" },
  { AR_DATA_TYPE_ATTACH, 		"attach" },
  { AR_DATA_TYPE_JOIN, 		"join" },
  { AR_DATA_TYPE_TRIM, 		"trim" },
  { AR_DATA_TYPE_CONTROL, 		"control" },
  { AR_DATA_TYPE_TABLE, 		"table" },
  { AR_DATA_TYPE_COLUMN, 		"column" },
  { AR_DATA_TYPE_PAGE, 		"page" },
  { AR_DATA_TYPE_PAGE_HOLDER, 		"page_holder" },
  { AR_DATA_TYPE_ULONG, 		"ulong" },
  { AR_DATA_TYPE_COORDS, 		"coords" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned long  number;
  char          *name;
} ByteListTypeMap[] = {
  { AR_BYTE_LIST_SELF_DEFINED, 		"self_defined" },
  { AR_BYTE_LIST_WIN30_BITMAP, 		"win30_bitmap" },
  { AR_BYTE_LIST_JPEG, 		"jpeg" },
  { AR_BYTE_LIST_TIFF, 		"tiff" },
  { AR_BYTE_LIST_TARGA, 		"targa" },
  { AR_BYTE_LIST_PCX, 		"pcx" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} NoMatchOptionMap[] = {
  { AR_NO_MATCH_ERROR, 		"error" },
  { AR_NO_MATCH_SET_NULL, 		"set_null" },
  { AR_NO_MATCH_NO_ACTION, 		"no_action" },
  { AR_NO_MATCH_SUBMIT, 		"submit" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} MultiMatchOptionMap[] = {
  { AR_MULTI_MATCH_ERROR, 		"error" },
  { AR_MULTI_MATCH_SET_NULL, 		"set_null" },
  { AR_MULTI_MATCH_USE_FIRST, 		"use_first" },
  { AR_MULTI_MATCH_PICKLIST, 		"picklist" },
  { AR_MULTI_MATCH_MODIFY_ALL, 		"modify_all" },
  { AR_MULTI_MATCH_NO_ACTION, 		"no_action" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} StatusReturnTypeMap[] = {
  { AR_RETURN_OK, 		"ok" },
  { AR_RETURN_WARNING, 		"warning" },
  { AR_RETURN_ERROR, 		"error" },
  { AR_RETURN_FATAL, 		"fatal" },
  { AR_RETURN_BAD_STATUS, 		"bad_status" },
  { AR_RETURN_PROMPT, 		"prompt" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} ArithOpMap[] = {
  { AR_ARITH_OP_ADD,      "+" },
  { AR_ARITH_OP_SUBTRACT, "-" },
  { AR_ARITH_OP_MULTIPLY, "*" },
  { AR_ARITH_OP_DIVIDE,   "/" },
  { AR_ARITH_OP_MODULO,   "%" },
  { AR_ARITH_OP_NEGATE,   "-" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} FunctionMap[] = {
  { AR_FUNCTION_DATE, 		"date" },
  { AR_FUNCTION_TIME, 		"time" },
  { AR_FUNCTION_MONTH, 		"month" },
  { AR_FUNCTION_DAY, 		"day" },
  { AR_FUNCTION_YEAR, 		"year" },
  { AR_FUNCTION_WEEKDAY, 		"weekday" },
  { AR_FUNCTION_HOUR, 		"hour" },
  { AR_FUNCTION_MINUTE, 		"minute" },
  { AR_FUNCTION_SECOND, 		"second" },
  { AR_FUNCTION_TRUNC, 		"trunc" },
  { AR_FUNCTION_ROUND, 		"round" },
  { AR_FUNCTION_CONVERT, 		"convert" },
  { AR_FUNCTION_LENGTH, 		"length" },
  { AR_FUNCTION_UPPER, 		"upper" },
  { AR_FUNCTION_LOWER, 		"lower" },
  { AR_FUNCTION_SUBSTR, 		"substr" },
  { AR_FUNCTION_LEFT, 		"left" },
  { AR_FUNCTION_RIGHT, 		"right" },
  { AR_FUNCTION_LTRIM, 		"ltrim" },
  { AR_FUNCTION_RTRIM, 		"rtrim" },
  { AR_FUNCTION_LPAD, 		"lpad" },
  { AR_FUNCTION_RPAD, 		"rpad" },
  { AR_FUNCTION_REPLACE, 		"replace" },
  { AR_FUNCTION_STRSTR, 		"strstr" },
  { AR_FUNCTION_MIN, 		"min" },
  { AR_FUNCTION_MAX, 		"max" },
  { AR_FUNCTION_COLSUM, 		"colsum" },
  { AR_FUNCTION_COLCOUNT, 		"colcount" },
  { AR_FUNCTION_COLAVG, 		"colavg" },
  { AR_FUNCTION_COLMIN, 		"colmin" },
  { AR_FUNCTION_COLMAX, 		"colmax" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
  int           len;
} KeyWordMap[] = {
  { AR_KEYWORD_DEFAULT, 		"\0DEFAULT\0", 		9 },
  { AR_KEYWORD_USER, 		"\0USER\0", 		6 },
  { AR_KEYWORD_TIMESTAMP, 		"\0TIMESTAMP\0", 		11 },
  { AR_KEYWORD_TIME_ONLY, 		"\0TIME_ONLY\0", 		11 },
  { AR_KEYWORD_DATE_ONLY, 		"\0DATE_ONLY\0", 		11 },
  { AR_KEYWORD_SCHEMA, 		"\0SCHEMA\0", 		8 },
  { AR_KEYWORD_SERVER, 		"\0SERVER\0", 		8 },
  { AR_KEYWORD_WEEKDAY, 		"\0WEEKDAY\0", 		9 },
  { AR_KEYWORD_GROUPS, 		"\0GROUPS\0", 		8 },
  { AR_KEYWORD_OPERATION, 		"\0OPERATION\0", 		11 },
  { AR_KEYWORD_HARDWARE, 		"\0HARDWARE\0", 		10 },
  { AR_KEYWORD_OS, 		"\0OS\0", 		4 },
  { AR_KEYWORD_DATABASE, 		"\0DATABASE\0", 		10 },
  { AR_KEYWORD_LASTID, 		"\0LASTID\0", 		8 },
  { AR_KEYWORD_LASTCOUNT, 		"\0LASTCOUNT\0", 		11 },
  { AR_KEYWORD_VERSION, 		"\0VERSION\0", 		9 },
  { AR_KEYWORD_VUI, 		"\0VUI\0", 		5 },
  { AR_KEYWORD_GUIDETEXT, 		"\0GUIDETEXT\0", 		11 },
  { AR_KEYWORD_FIELDHELP, 		"\0FIELDHELP\0", 		11 },
  { AR_KEYWORD_GUIDE, 		"\0GUIDE\0", 		7 },
  { AR_KEYWORD_APPLICATION, 		"\0APPLICATION\0", 		13 },
  { AR_KEYWORD_NO, 		"\0NO\0", 		4 },
  { TYPEMAP_LAST, "", 0 }
};

static struct {
  unsigned int number;
  char *name;
} ServerInfoMap[] = {
  { 0, NULL },
  { AR_SERVER_INFO_DB_TYPE, 	"DB_TYPE" },
  { AR_SERVER_INFO_SERVER_LICENSE, 	"SERVER_LICENSE" },
  { AR_SERVER_INFO_FIXED_LICENSE, 	"FIXED_LICENSE" },
  { AR_SERVER_INFO_VERSION, 	"VERSION" },
  { AR_SERVER_INFO_ALLOW_GUESTS, 	"ALLOW_GUESTS" },
  { AR_SERVER_INFO_USE_ETC_PASSWD, 	"USE_ETC_PASSWD" },
  { AR_SERVER_INFO_XREF_PASSWORDS, 	"XREF_PASSWORDS" },
  { AR_SERVER_INFO_DEBUG_MODE, 	"DEBUG_MODE" },
  { AR_SERVER_INFO_DB_NAME, 	"DB_NAME" },
  { AR_SERVER_INFO_DB_PASSWORD, 	"DB_PASSWORD" },
  { AR_SERVER_INFO_HARDWARE, 	"HARDWARE" },
  { AR_SERVER_INFO_OS, 	"OS" },
  { AR_SERVER_INFO_SERVER_DIR, 	"SERVER_DIR" },
  { AR_SERVER_INFO_DBHOME_DIR, 	"DBHOME_DIR" },
  { AR_SERVER_INFO_SET_PROC_TIME, 	"SET_PROC_TIME" },
  { AR_SERVER_INFO_EMAIL_FROM, 	"EMAIL_FROM" },
  { AR_SERVER_INFO_SQL_LOG_FILE, 	"SQL_LOG_FILE" },
  { AR_SERVER_INFO_FLOAT_LICENSE, 	"FLOAT_LICENSE" },
  { AR_SERVER_INFO_FLOAT_TIMEOUT, 	"FLOAT_TIMEOUT" },
  { AR_SERVER_INFO_UNQUAL_QUERIES, 	"UNQUAL_QUERIES" },
  { AR_SERVER_INFO_FILTER_LOG_FILE, 	"FILTER_LOG_FILE" },
  { AR_SERVER_INFO_USER_LOG_FILE, 	"USER_LOG_FILE" },
  { AR_SERVER_INFO_REM_SERV_ID, 	"REM_SERV_ID" },
  { AR_SERVER_INFO_MULTI_SERVER, 	"MULTI_SERVER" },
  { AR_SERVER_INFO_EMBEDDED_SQL, 	"EMBEDDED_SQL" },
  { AR_SERVER_INFO_MAX_SCHEMAS, 	"MAX_SCHEMAS" },
  { AR_SERVER_INFO_DB_VERSION, 	"DB_VERSION" },
  { AR_SERVER_INFO_MAX_ENTRIES, 	"MAX_ENTRIES" },
  { AR_SERVER_INFO_MAX_F_DAEMONS, 	"MAX_F_DAEMONS" },
  { AR_SERVER_INFO_MAX_L_DAEMONS, 	"MAX_L_DAEMONS" },
  { AR_SERVER_INFO_ESCALATION_LOG_FILE, 	"ESCALATION_LOG_FILE" },
  { AR_SERVER_INFO_ESCL_DAEMON, 	"ESCL_DAEMON" },
  { AR_SERVER_INFO_SUBMITTER_MODE, 	"SUBMITTER_MODE" },
  { AR_SERVER_INFO_API_LOG_FILE, 	"API_LOG_FILE" },
  { AR_SERVER_INFO_FTEXT_FIXED, 	"FTEXT_FIXED" },
  { AR_SERVER_INFO_FTEXT_FLOAT, 	"FTEXT_FLOAT" },
  { AR_SERVER_INFO_FTEXT_TIMEOUT, 	"FTEXT_TIMEOUT" },
  { AR_SERVER_INFO_RESERV1_A, 	"RESERV1_A" },
  { AR_SERVER_INFO_RESERV1_B, 	"RESERV1_B" },
  { AR_SERVER_INFO_RESERV1_C, 	"RESERV1_C" },
  { AR_SERVER_INFO_SERVER_IDENT, 	"SERVER_IDENT" },
  { AR_SERVER_INFO_DS_SVR_LICENSE, 	"DS_SVR_LICENSE" },
  { AR_SERVER_INFO_DS_MAPPING, 	"DS_MAPPING" },
  { AR_SERVER_INFO_DS_PENDING, 	"DS_PENDING" },
  { AR_SERVER_INFO_DS_RPC_SOCKET, 	"DS_RPC_SOCKET" },
  { AR_SERVER_INFO_DS_LOG_FILE, 	"DS_LOG_FILE" },
  { AR_SERVER_INFO_SUPPRESS_WARN, 	"SUPPRESS_WARN" },
  { AR_SERVER_INFO_HOSTNAME, 	"HOSTNAME" },
  { AR_SERVER_INFO_FULL_HOSTNAME, 	"FULL_HOSTNAME" },
  { AR_SERVER_INFO_SAVE_LOGIN, 	"SAVE_LOGIN" },
  { AR_SERVER_INFO_U_CACHE_CHANGE, 	"U_CACHE_CHANGE" },
  { AR_SERVER_INFO_G_CACHE_CHANGE, 	"G_CACHE_CHANGE" },
  { AR_SERVER_INFO_STRUCT_CHANGE, 	"STRUCT_CHANGE" },
  { AR_SERVER_INFO_CASE_SENSITIVE, 	"CASE_SENSITIVE" },
  { AR_SERVER_INFO_SERVER_LANG, 	"SERVER_LANG" },
  { AR_SERVER_INFO_ADMIN_ONLY, 	"ADMIN_ONLY" },
  { AR_SERVER_INFO_CACHE_LOG_FILE, 	"CACHE_LOG_FILE" },
  { AR_SERVER_INFO_FLASH_DAEMON, 	"FLASH_DAEMON" },
  { AR_SERVER_INFO_THREAD_LOG_FILE, 	"THREAD_LOG_FILE" },
  { AR_SERVER_INFO_ADMIN_TCP_PORT, 	"ADMIN_TCP_PORT" },
  { AR_SERVER_INFO_ESCL_TCP_PORT, 	"ESCL_TCP_PORT" },
  { AR_SERVER_INFO_FAST_TCP_PORT, 	"FAST_TCP_PORT" },
  { AR_SERVER_INFO_LIST_TCP_PORT, 	"LIST_TCP_PORT" },
  { AR_SERVER_INFO_FLASH_TCP_PORT, 	"FLASH_TCP_PORT" },
  { AR_SERVER_INFO_TCD_TCP_PORT, 	"TCD_TCP_PORT" },
  { AR_SERVER_INFO_DSO_DEST_PORT, 	"DSO_DEST_PORT" },
  { AR_SERVER_INFO_INFORMIX_DBN, 	"INFORMIX_DBN" },
  { AR_SERVER_INFO_INFORMIX_TBC, 	"INFORMIX_TBC" },
  { AR_SERVER_INFO_INGRES_VNODE, 	"INGRES_VNODE" },
  { AR_SERVER_INFO_ORACLE_SID, 	"ORACLE_SID" },
  { AR_SERVER_INFO_ORACLE_TWO_T, 	"ORACLE_TWO_T" },
  { AR_SERVER_INFO_SYBASE_CHARSET, 	"SYBASE_CHARSET" },
  { AR_SERVER_INFO_SYBASE_SERV, 	"SYBASE_SERV" },
  { AR_SERVER_INFO_SHARED_MEM, 	"SHARED_MEM" },
  { AR_SERVER_INFO_SHARED_CACHE, 	"SHARED_CACHE" },
  { AR_SERVER_INFO_CACHE_SEG_SIZE, 	"CACHE_SEG_SIZE" },
  { AR_SERVER_INFO_DB_USER, 	"DB_USER" },
  { AR_SERVER_INFO_NFY_TCP_PORT, 	"NFY_TCP_PORT" },
  { AR_SERVER_INFO_FILT_MAX_TOTAL, 	"FILT_MAX_TOTAL" },
  { AR_SERVER_INFO_FILT_MAX_STACK, 	"FILT_MAX_STACK" },
  { AR_SERVER_INFO_DEFAULT_ORDER_BY, 	"DEFAULT_ORDER_BY" },
  { AR_SERVER_INFO_DELAYED_CACHE, 	"DELAYED_CACHE" },
  { AR_SERVER_INFO_DSO_MERGE_STYLE, 	"DSO_MERGE_STYLE" },
  { AR_SERVER_INFO_EMAIL_LINE_LEN, 	"EMAIL_LINE_LEN" },
  { AR_SERVER_INFO_EMAIL_SYSTEM, 	"EMAIL_SYSTEM" },
  { AR_SERVER_INFO_INFORMIX_RELAY_MOD, 	"INFORMIX_RELAY_MOD" },
  { AR_SERVER_INFO_PS_RPC_SOCKET, 	"PS_RPC_SOCKET" },
  { AR_SERVER_INFO_REGISTER_PORTMAPPER, 	"REGISTER_PORTMAPPER" },
  { AR_SERVER_INFO_SERVER_NAME, 	"SERVER_NAME" },
  { AR_SERVER_INFO_DBCONF, 	"DBCONF" },
  { AR_SERVER_INFO_APPL_PENDING, 	"APPL_PENDING" },
  { AR_SERVER_INFO_AP_RPC_SOCKET, 	"AP_RPC_SOCKET" },
  { AR_SERVER_INFO_AP_LOG_FILE, 	"AP_LOG_FILE" },
  { AR_SERVER_INFO_AP_DEFN_CHECK, 	"AP_DEFN_CHECK" },
  { AR_SERVER_INFO_MAX_LOG_FILE_SIZE, 	"MAX_LOG_FILE_SIZE" },
  { AR_SERVER_INFO_CLUSTERED_INDEX, 	"CLUSTERED_INDEX" },
  { AR_SERVER_INFO_ACTLINK_DIR, 	"ACTLINK_DIR" },
  { AR_SERVER_INFO_ACTLINK_SHELL, 	"ACTLINK_SHELL" },
  { AR_SERVER_INFO_USER_CACHE_UTILS, 	"USER_CACHE_UTILS" },
  { AR_SERVER_INFO_EMAIL_TIMEOUT, 	"EMAIL_TIMEOUT" },
  { AR_SERVER_INFO_EXPORT_VERSION, 	"EXPORT_VERSION" },
  { AR_SERVER_INFO_ENCRYPT_AL_SQL, 	"ENCRYPT_AL_SQL" },
  { AR_SERVER_INFO_SCC_ENABLED, 	"SCC_ENABLED" },
  { AR_SERVER_INFO_SCC_PROVIDER_NAME, 	"SCC_PROVIDER_NAME" },
  { AR_SERVER_INFO_SCC_TARGET_DIR, 	"SCC_TARGET_DIR" },
  { AR_SERVER_INFO_SCC_COMMENT_CHECKIN, 	"SCC_COMMENT_CHECKIN" },
  { AR_SERVER_INFO_SCC_COMMENT_CHECKOUT, 	"SCC_COMMENT_CHECKOUT" },
  { AR_SERVER_INFO_SCC_INTEGRATION_MODE, 	"SCC_INTEGRATION_MODE" },
  { AR_SERVER_INFO_EA_RPC_SOCKET, 	"EA_RPC_SOCKET" },
  { AR_SERVER_INFO_EA_RPC_TIMEOUT, 	"EA_RPC_TIMEOUT" },
  { AR_SERVER_INFO_USER_INFO_LISTS, 	"USER_INFO_LISTS" },
  { AR_SERVER_INFO_USER_INST_TIMEOUT, 	"USER_INST_TIMEOUT" },
  { AR_SERVER_INFO_DEBUG_GROUPID, 	"DEBUG_GROUPID" },
  { AR_SERVER_INFO_APPLICATION_AUDIT, 	"APPLICATION_AUDIT" },
  { AR_SERVER_INFO_EA_SYNC_TIMEOUT, 	"EA_SYNC_TIMEOUT" },
  { AR_SERVER_INFO_SERVER_TIME, 	"SERVER_TIME" },
  { AR_SERVER_INFO_SVR_SEC_CACHE, 	"SVR_SEC_CACHE" },
  { AR_SERVER_INFO_LOGFILE_APPEND, 	"LOGFILE_APPEND" },
  { AR_SERVER_INFO_MINIMUM_API_VER, 	"MINIMUM_API_VER" },
  { TYPEMAP_LAST, NULL }
};

EXTERN char *lookUpTypeName(TypeMapStruct *t, unsigned int v);

/* typedef SV* (*ARS_fn)(void *); */
typedef void *(*ARS_fn)(ARControlStruct *ctrl, void *b);

EXTERN void        *mallocnn(int s);
EXTERN void        *debug_mallocnn(int s, char *file, char *func, int line);
EXTERN void         debug_free(void *p, char *file, char *func, int line);
EXTERN unsigned int strsrch(register char *s, register char c);
EXTERN char        *strappend(char *b, char *a);

EXTERN int          ARError_reset();
EXTERN int          ARError_add( unsigned int type, long num, char *text);
EXTERN int          ARError( int returncode, ARStatusList status);
EXTERN int          NTError( int returncode, NTStatusList status);

EXTERN SV *perl_diary(ARControlStruct *ctrl, ARDiaryStruct *in);
EXTERN SV *perl_MenuRefreshCode2Str(ARControlStruct *ctrl,  unsigned int rc);
EXTERN SV *perl_ARPermissionList(ARControlStruct *ctrl,  ARPermissionList *in, int);
EXTERN SV *perl_ARStatusStruct(ARControlStruct *ctrl,  ARStatusStruct *);
#if AR_EXPORT_VERSION >= 4
EXTERN SV *perl_ARMessageStruct(ARControlStruct *ctrl,  ARMessageStruct *);
#endif
#if AR_EXPORT_VERSION >= 5
EXTERN SV *perl_ARWorkflowConnectStruct(ARControlStruct * ctrl, ARWorkflowConnectStruct * in);
EXTERN SV *perl_ARNameList(ARControlStruct * ctrl, ARNameList * in);
#endif
EXTERN SV *perl_ARInternalId(ARControlStruct *ctrl,  ARInternalId *);
EXTERN SV *perl_ARNameType(ARControlStruct *ctrl,  ARNameType *);
EXTERN SV *perl_ARList(ARControlStruct *ctrl,  ARList *, ARS_fn, int);
EXTERN SV *perl_ARValueStruct(ARControlStruct *ctrl, ARValueStruct *);
EXTERN SV *perl_ARValueStructType(ARControlStruct *ctrl,  ARValueStruct *in);
EXTERN SV *perl_dataType_names(ARControlStruct *ctrl,  unsigned int *);
EXTERN SV *perl_ARStatHistoryValue(ARControlStruct *ctrl,  ARStatHistoryValue *);
EXTERN SV *perl_ARAssignFieldStruct(ARControlStruct *ctrl,  ARAssignFieldStruct *);
EXTERN SV *perl_ARAssignStruct(ARControlStruct *ctrl,  ARAssignStruct *);
EXTERN SV *perl_ARFieldAssignStruct(ARControlStruct *ctrl,  ARFieldAssignStruct *);
EXTERN SV *perl_ARDisplayStruct(ARControlStruct *ctrl,  ARDisplayStruct *);
EXTERN SV *perl_ARMacroParmStruct(ARControlStruct *ctrl, ARMacroParmStruct *);
EXTERN SV *perl_ARActiveLinkMacroStruct(ARControlStruct *ctrl, 
					ARActiveLinkMacroStruct *);
EXTERN SV *perl_ARFieldCharacteristics(ARControlStruct *ctrl, 
					ARFieldCharacteristics *);
EXTERN SV *perl_ARDDEStruct(ARControlStruct *ctrl,  ARDDEStruct *);
EXTERN SV *perl_ARActiveLinkActionStruct(ARControlStruct *ctrl, 
					 ARActiveLinkActionStruct *);
EXTERN SV *perl_ARFilterActionStruct(ARControlStruct *ctrl,  ARFilterActionStruct *);
EXTERN SV *perl_expandARCharMenuStruct( ARControlStruct *, ARCharMenuStruct *);
EXTERN SV *perl_AREntryListFieldStruct(ARControlStruct *ctrl, 
					AREntryListFieldStruct *);
EXTERN SV *perl_ARIndexStruct(ARControlStruct *ctrl,  ARIndexStruct *);
EXTERN SV *perl_ARFieldLimitStruct(ARControlStruct *ctrl,  ARFieldLimitStruct *);
EXTERN SV *perl_ARFunctionAssignStruct(ARControlStruct *ctrl, 
					 ARFunctionAssignStruct *);
EXTERN SV *perl_ARArithOpAssignStruct(ARControlStruct *ctrl,  ARArithOpAssignStruct *);
EXTERN void dup_Value(ARControlStruct *ctrl,  ARValueStruct *, ARValueStruct *);
EXTERN ARArithOpStruct *dup_ArithOp(ARControlStruct *ctrl,  ARArithOpStruct *);
EXTERN void dup_ValueList(ARControlStruct *ctrl,  ARValueList *, ARValueList *);
EXTERN ARQueryValueStruct *dup_QueryValue(ARControlStruct *ctrl, 
					 ARQueryValueStruct *);
EXTERN void dup_FieldValueOrArith(ARControlStruct *ctrl, 
				  ARFieldValueOrArithStruct *,
				  ARFieldValueOrArithStruct *);
EXTERN ARRelOpStruct *dup_RelOp(ARControlStruct *ctrl,  ARRelOpStruct *);
EXTERN ARQualifierStruct *dup_qualifier(ARControlStruct *ctrl,  ARQualifierStruct *);
EXTERN ARQualifierStruct *dup_qualifier2(ARControlStruct *ctrl, 
					 ARQualifierStruct *in, 
					 ARQualifierStruct *out, int level);
EXTERN SV *perl_ARArithOpStruct(ARControlStruct *ctrl,  ARArithOpStruct *);
EXTERN SV *perl_ARQueryValueStruct(ARControlStruct *ctrl,  ARQueryValueStruct *);
EXTERN SV *perl_ARFieldValueOrArithStruct( ARControlStruct *ctrl,
					   ARFieldValueOrArithStruct *);
EXTERN SV *perl_relOp(ARControlStruct *ctrl, ARRelOpStruct *);
EXTERN HV *perl_qualifier(ARControlStruct *ctrl,  ARQualifierStruct *);
EXTERN int ARGetFieldCached( ARControlStruct *, ARNameType, ARInternalId,
#if AR_EXPORT_VERSION >= 3
		     ARNameType, ARFieldMappingStruct *,
#endif
		     unsigned int *, unsigned int *,
		     unsigned int *, ARValueStruct *,
		     ARPermissionList *, ARFieldLimitStruct *,
#if AR_EXPORT_VERSION >= 3
		     ARDisplayInstanceList *,
#else
		     ARDisplayList *,
#endif
		     char **, ARTimestamp *,
		     ARNameType, ARNameType, char **,
		     ARStatusList *);
EXTERN int sv_to_ARValue(ARControlStruct *ctrl, 
			 SV *in, unsigned int dataType, ARValueStruct *out);
#if AR_EXPORT_VERSION >= 3
EXTERN SV *perl_ARPropStruct(ARControlStruct *ctrl,  ARPropStruct *in);
EXTERN SV *perl_ARPropList(ARControlStruct *ctrl, ARPropList *in);
EXTERN SV *perl_ARDisplayInstanceStruct(ARControlStruct *ctrl,
				  ARDisplayInstanceStruct *);
EXTERN SV *perl_ARDisplayInstanceList(ARControlStruct *ctrl,  ARDisplayInstanceList *);
EXTERN SV *perl_ARFieldMappingStruct(ARControlStruct *ctrl,  ARFieldMappingStruct *);
EXTERN SV *perl_ARJoinMappingStruct(ARControlStruct *ctrl,  ARJoinMappingStruct *);
EXTERN SV *perl_ARViewMappingStruct(ARControlStruct *ctrl,  ARViewMappingStruct *);
EXTERN SV *perl_ARJoinSchema(ARControlStruct *ctrl,  ARJoinSchema *);
EXTERN SV *perl_ARViewSchema(ARControlStruct *ctrl,  ARViewSchema *);
EXTERN SV *perl_ARCompoundSchema(ARControlStruct *ctrl,  ARCompoundSchema *);
EXTERN SV *perl_ARSortList(ARControlStruct *ctrl,  ARSortList *);
EXTERN SV *perl_ARByteList(ARControlStruct *ctrl,  ARByteList *);
EXTERN SV *perl_ARCoordStruct(ARControlStruct *ctrl,  ARCoordStruct *);
EXTERN int perl_BuildEntryList(ARControlStruct *ctrl,  AREntryIdList *entryList, 
				char *entry_id);
EXTERN SV *perl_ARAssignSQLStruct(ARControlStruct *ctrl,  ARAssignSQLStruct *in);
#endif

#if AR_EXPORT_VERSION >= 4
EXTERN SV *perl_ARSQLStruct(ARControlStruct *ctrl, ARSQLStruct *in);
EXTERN SV *perl_ARAttach(ARControlStruct *ctrl,  ARAttachStruct *in);
EXTERN SV *perl_ARPushFieldsStruct(ARControlStruct *ctrl, 
				   ARPushFieldsStruct *in);
EXTERN SV *perl_ARAutomationStruct(ARControlStruct *ctrl,
				   ARAutomationStruct *in);
EXTERN SV *perl_ARCOMMethodStruct(ARControlStruct *ctrl,
				  ARCOMMethodStruct *in);
EXTERN SV *perl_ARCOMMethodParmStruct(ARControlStruct *ctrl,
				      ARCOMMethodParmStruct *in);
EXTERN SV *perl_ARCOMValueStruct(ARControlStruct * ctrl,
				 ARCOMValueStruct * in);
EXTERN SV *perl_AROpenDlgStruct(ARControlStruct * ctrl,
				AROpenDlgStruct * in);
#endif

#ifndef BSD
# define MEMCAST void
#else
# define MEMCAST char
#endif

int  compmem(MEMCAST *m1, MEMCAST *m2, int size);
int  copymem(MEMCAST *m1, MEMCAST *m2, int size);


#ifndef ARSPERL_MALLOCDEBUG
# define MALLOCNN(X) mallocnn(X) 
#else /* we want to debug memory allocations */
# define MALLOCNN(X) debug_mallocnn(X, __FILE__, __FUNCTION__, __LINE__) 
#endif /* malloc debugging */

#ifndef ARSPERL_FREEDEBUG
# define FREE(X) free(X)
#else
# define FREE(X) debug_free(X, __FILE__, __FUNCTION__, __LINE__)
#endif /* free debugging */

#define CPNULL (char *)NULL

/* some useful macros: CharVaLiD and IntVaLiD .. 
 * for checking validity of paramters
 * VNAME() for all of those perl functions that want a string and
 * it's length as the next parameter.
 */

#define CVLD(X) (X && *X)
#define IVLD(X, L, H) ((X <= H) && (L >= X))

#define VNAME(X) X, strlen(X)

/* defines used by the ARError* functions */

#define ERRHASH  "ARS::ars_errhash"
#define EH_COUNT "numItems"
#define EH_TYPE  "messageType"
#define EH_NUM   "messageNum"
#define EH_TEXT  "messageText"

#define ARSPERL_TRACEBACK -1

#define AP_ERR_BAD_ARGS     80000, "Invalid number of arguments"
#define AP_ERR_BAD_EID      80001, "Invalid entry-id argument"
#define AP_ERR_EID_TYPE     80002, "Entry-id should be an array or a single scalar"
#define AP_ERR_EID_LEN      80003, "Invalid Entry-id length"
#define AP_ERR_BAD_LFLDS    80004, "Bad GetListFields"
#define AP_ERR_LFLDS_TYPE   80005, "GetListFields must be an ARRAY reference"
#define AP_ERR_USAGE        80006  /* roll your own text */
#define AP_ERR_MALLOC       80007, "mallocnn() failed to allocate space"
#define AP_ERR_BAD_EXP      80009, "Unknown export type"
#define AP_ERR_BAD_IMP      80010, "Unknown import type"
#define AP_ERR_DEPRECATED   80011  /* roll your own text */
#define AP_ERR_NO_SERVERS   80012, "No servers available"
#define AP_ERR_FIELD_TYPE   80013, "Unknown field type"
#define AP_ERR_COORD_LIST   80014, "Bad coord list"
#define AP_ERR_COORD_STRUCT 80015, "Bad coord struct"
#define AP_ERR_BYTE_LIST    80016, "Bad byte list"
#define AP_ERR_EID_SEP      80017, "Expected EID to contain a separator"
#define AP_ERR_OPT_NA       80018 /* roll your own text - option not available */
#define AP_ERR_EXPECT_PVHV  80019, "Expected argument to contain a HASH reference"
#define AP_ERR_GENERAL      80020 /* roll your own text */
#define AP_ERR_CONTINUE     80021 /* roll your own continuation text */
#define AP_ERR_NEEDKEYS     80022, "Required hash keys do not exists"
#define AP_ERR_NEEDKEYSKEYS 80023 /* specify what keys */
#define AP_ERR_PREREVFAIL   80024, "Failed to convert some perl structures to ars structures. Create/Set operation aborted."
#define AP_ERR_ATTACH       80025  /* roll your own text */
#define AP_ERR_INV_ARGS     80026 /* roll your own - invalid argument(s) */


#endif /* __support_h_ */
